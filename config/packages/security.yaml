security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        app_userLogin_provider:
            entity:
                class: App\Entity\User
                property: userLogin
        all_users:
            chain:
                providers: ['app_user_provider', 'app_userLogin_provider']
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            provider: 'all_users'
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            
            
            logout:
                path: app_logout

        api:
            pattern:   ^/api
            stateless: true
            provider: 'all_users'
            jwt: ~
            entry_point: 'lexik_jwt_authentication.security.authentication.entry_point'
            refresh_jwt:
                check_path: jwt_refresh
     
            
        

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        #- { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
        #- { path: ^/token/refresh$, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/registerAutomatic,       roles: IS_AUTHENTICATED_FULLY }
        #- { path: ^/api/session/test,       roles: IS_AUTHENTICATED_FULLY }
        #- { path: ^/api/register,       roles: ROLE_SUPER_ADMIN }
        #- { path: ^/api/register,       roles: IS_AUTHENTICATED_FULLY }
        #- { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
